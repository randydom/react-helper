#!/usr/bin/env node
var program = require('commander');
var exec = require('child_process').exec;
var fs = require('fs');
var async = require('async');
var path = require('path');

program
  .version('cli version 2.0.0')

program
  .command('init')
  .description('add react to your app')
  .option('-p, --bundle-path <bundlePath>', 'Bundle path', './public/javascript')
  .option('-n, --bundle-name <bundleName>', 'Bundle name', 'bundle.js')
  .option('-c, --client-dir <clientDir>', 'React app directory', './client')
  .option('-w, --webpack', 'Add webpack and generate config', false)
  .action(function(options) {
    async.series([
      function(callback){
        console.log('Adding react-helper to app...')
        exec('npm install react-helper --save', function(err, stdout, stderr) {
          console.log(stdout);
          callback(err);
        })
      },
      function(callback){
        console.log(`Creating react app directory at ${options.clientDir}`)
        exec(`mkdir ${options.clientDir}`, function(err, stdout, stderr) {
          console.log(stdout);
          callback(err);
        })
      },
      function(callback){
        var registrationFilePath = path.resolve(__dirname, 'files/registration-file.js');
        console.log(`Creating component registry ${options.clientDir}/registry.js`)
        exec(`cp ${registrationFilePath} ${options.clientDir}/registry.js`, function(err, stdout, stderr) {
          console.log(stdout);
          callback(err);
        })
      },
      function(callback) {
        if (options.webpack) {
          var entry = `${options.clientDir}/registry.js`;
          var bundlePath = options.bundlePath;
          if (!entry.includes('./')) {
            entry = './' + entry;
          }
          if (!bundlePath.includes('./')) {
            bundlePath = './' + bundlePath;
          }

          var filePath = path.resolve(__dirname, 'files/webpack.config.js');
          console.log('Adding webpack to app...')
          exec('npm install webpack babel-polyfill babel-loader babel-preset-env babel-preset-react babel-core babel-plugin-transform-object-rest-spread babel-plugin-transform-class-properties --save-dev', function (err, stdout, stderr) {
            console.log(stdout);
            console.log(`Creating webpack config`);
            fs.readFile(filePath, 'utf-8', function (err, data) {
              if (err) throw err;
              var config = data.replace('ENTRY_FILE_PATH', entry)
                .replace('OUTPUT_FILENAME', options.bundleName)
                .replace('OUTPUT_FILE_PATH', bundlePath);

              fs.writeFile('./webpack.config.js', config, 'utf-8', function (err) {
                if (err) throw err;
                console.log('webpack config created');
                console.log('to build your bundle run: node_modules/.bin/webpack');
                callback();
              });
            });
          });
        }
      }
    ], function(err, results) {
      if (err) {
        console.log(err)
      } else {
        console.log('Done!')
      }
    })
  })


program.parse(process.argv);
